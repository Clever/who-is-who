package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// User user
// swagger:model User
type User struct {

	// AWS username (IAM user)
	// Required: true
	Aws *string `json:"aws"`

	// E-mail address
	// Required: true
	Email *string `json:"email"`

	// First name
	// Required: true
	FirstName *string `json:"first_name"`

	// Github username
	// Required: true
	Github *string `json:"github"`

	// Last name
	// Required: true
	LastName *string `json:"last_name"`

	// Phone number
	// Required: true
	Phone *string `json:"phone"`

	// Slack username
	// Required: true
	SLACK *string `json:"slack"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAws(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGithub(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSLACK(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAws(formats strfmt.Registry) error {

	if err := validate.Required("aws", "body", m.Aws); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *User) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("first_name", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *User) validateGithub(formats strfmt.Registry) error {

	if err := validate.Required("github", "body", m.Github); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("last_name", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePhone(formats strfmt.Registry) error {

	if err := validate.Required("phone", "body", m.Phone); err != nil {
		return err
	}

	return nil
}

func (m *User) validateSLACK(formats strfmt.Registry) error {

	if err := validate.Required("slack", "body", m.SLACK); err != nil {
		return err
	}

	return nil
}
